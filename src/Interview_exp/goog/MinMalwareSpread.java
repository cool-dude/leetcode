/*
* LC924: Minimize Malware Spread
In a network of nodes, each node i is
* directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
* Whenever two nodes are directly connected and at least
* one of those two nodes is infected by malware,
* both nodes will be infected by malware.
* This spread of malware will continue until
* no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes
* infected with malware in the entire network, after the spread of malware stops.

*
We will remove one node from the initial list.
*  Return the node that if removed, would minimize M(initial).
* If multiple nodes could be removed to minimize M(initial),
*  return such a node with the smallest index.

Note that if a node was removed from the initial list of
* infected nodes, it may still be infected later as a result of the malware spread.*/
class Sln {
    void dfs(int[][] graph,int[] colors, int node, int color){
        colors[node]=color;
        for(int nei=0;nei<graph.length;nei++){
            if(graph[node][nei]==1 && colors[nei]==-1)
                dfs(graph, colors, nei, colors);
        }
    }
    int minMalwareSpread(int[][] graph, int[] initial) {
        //color each componennt
        //Color(node):Color of the node
        int n=graph.length;
        //n colors available
        int[] colors=new int[n];
        Arrays.fill(color,-1);

        //Number of different colors
        int cnt=0;

        //color graph/node using DFS
        for(int node=0;node<n;node++)
            if(colors[node]==-1)
                dfs(graph,colors,node,cnt++);

        //size of each color
        int[] size=new int[cnt];
        for(int color:colors)
            size[colors]++;

        //find uniq colors
        int[] colorCount=new int[cnt];
        for(int node:initial){
            int c=colors[node];
            if(colorCount[c]==1){
                if(ans==Integer.MAX_VALUE)
                    ans=node;
                else if(size[c]>size[colors[ans]])
                    ans=node;
                else if(size[c]==size[colors[ans]] && node<ans)
                    ans=node;
            }
        }
    }
}